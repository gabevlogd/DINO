//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Traslation"",
            ""id"": ""4378a768-da8a-46dc-80c1-5addb3c86165"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""9160745a-4928-4ee3-a053-910996665006"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lateral"",
                    ""type"": ""Button"",
                    ""id"": ""37b48124-df69-4918-8e30-1bcf17a4e4a8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Vertical"",
                    ""type"": ""Button"",
                    ""id"": ""ee093b2a-ea9d-4ba0-809e-e6177a3c5d03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Z Axis"",
                    ""id"": ""fad4c59e-2697-4797-a408-3a3a9aa58ba4"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""baee524b-7fa7-4762-ae74-3d295e0f895e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""74833fc2-3075-4c03-9341-e3e36402320f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""X Axis"",
                    ""id"": ""56ce1fe6-2f6a-4190-8f78-254563396ab6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ef18c4a1-45d6-46b1-a48f-3ea8631917d0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""90b7bd62-1a4d-4b2e-8aa4-c079e11ecff1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lateral"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Y Axis"",
                    ""id"": ""4b803ff8-b63a-4197-ae35-e3633d31b52c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cedbf3ca-ddf3-45f3-bba2-3caa4be4cb3f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""821e2eb7-2fbd-4e33-8bff-eae85811cd75"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Rotation"",
            ""id"": ""9ab6a8c4-d6f4-4299-a8e9-4afe7b1247b0"",
            ""actions"": [
                {
                    ""name"": ""Pitch"",
                    ""type"": ""Value"",
                    ""id"": ""b8a72b36-720c-42fa-b0de-ddfb721f2c2b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Yaw"",
                    ""type"": ""Value"",
                    ""id"": ""37754fc4-1a03-4c95-8e8a-668a339a5057"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""057976ba-d541-429c-8cc2-9282360a1eba"",
                    ""path"": ""<Pointer>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90bf4d09-f0a4-46ff-a00c-7fc736602124"",
                    ""path"": ""<Pointer>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Yaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DINOInput"",
            ""id"": ""404d6999-34ce-4406-bae1-f6b8eee9a85d"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Value"",
                    ""id"": ""0c7ca338-2497-42e1-bea6-ab51ba7eb01f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3fc94876-c258-48d9-9e7b-751ed31877c7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Traslation
        m_Traslation = asset.FindActionMap("Traslation", throwIfNotFound: true);
        m_Traslation_Forward = m_Traslation.FindAction("Forward", throwIfNotFound: true);
        m_Traslation_Lateral = m_Traslation.FindAction("Lateral", throwIfNotFound: true);
        m_Traslation_Vertical = m_Traslation.FindAction("Vertical", throwIfNotFound: true);
        // Rotation
        m_Rotation = asset.FindActionMap("Rotation", throwIfNotFound: true);
        m_Rotation_Pitch = m_Rotation.FindAction("Pitch", throwIfNotFound: true);
        m_Rotation_Yaw = m_Rotation.FindAction("Yaw", throwIfNotFound: true);
        // DINOInput
        m_DINOInput = asset.FindActionMap("DINOInput", throwIfNotFound: true);
        m_DINOInput_Jump = m_DINOInput.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Traslation
    private readonly InputActionMap m_Traslation;
    private ITraslationActions m_TraslationActionsCallbackInterface;
    private readonly InputAction m_Traslation_Forward;
    private readonly InputAction m_Traslation_Lateral;
    private readonly InputAction m_Traslation_Vertical;
    public struct TraslationActions
    {
        private @PlayerInput m_Wrapper;
        public TraslationActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Traslation_Forward;
        public InputAction @Lateral => m_Wrapper.m_Traslation_Lateral;
        public InputAction @Vertical => m_Wrapper.m_Traslation_Vertical;
        public InputActionMap Get() { return m_Wrapper.m_Traslation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TraslationActions set) { return set.Get(); }
        public void SetCallbacks(ITraslationActions instance)
        {
            if (m_Wrapper.m_TraslationActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_TraslationActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_TraslationActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_TraslationActionsCallbackInterface.OnForward;
                @Lateral.started -= m_Wrapper.m_TraslationActionsCallbackInterface.OnLateral;
                @Lateral.performed -= m_Wrapper.m_TraslationActionsCallbackInterface.OnLateral;
                @Lateral.canceled -= m_Wrapper.m_TraslationActionsCallbackInterface.OnLateral;
                @Vertical.started -= m_Wrapper.m_TraslationActionsCallbackInterface.OnVertical;
                @Vertical.performed -= m_Wrapper.m_TraslationActionsCallbackInterface.OnVertical;
                @Vertical.canceled -= m_Wrapper.m_TraslationActionsCallbackInterface.OnVertical;
            }
            m_Wrapper.m_TraslationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Lateral.started += instance.OnLateral;
                @Lateral.performed += instance.OnLateral;
                @Lateral.canceled += instance.OnLateral;
                @Vertical.started += instance.OnVertical;
                @Vertical.performed += instance.OnVertical;
                @Vertical.canceled += instance.OnVertical;
            }
        }
    }
    public TraslationActions @Traslation => new TraslationActions(this);

    // Rotation
    private readonly InputActionMap m_Rotation;
    private IRotationActions m_RotationActionsCallbackInterface;
    private readonly InputAction m_Rotation_Pitch;
    private readonly InputAction m_Rotation_Yaw;
    public struct RotationActions
    {
        private @PlayerInput m_Wrapper;
        public RotationActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pitch => m_Wrapper.m_Rotation_Pitch;
        public InputAction @Yaw => m_Wrapper.m_Rotation_Yaw;
        public InputActionMap Get() { return m_Wrapper.m_Rotation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotationActions set) { return set.Get(); }
        public void SetCallbacks(IRotationActions instance)
        {
            if (m_Wrapper.m_RotationActionsCallbackInterface != null)
            {
                @Pitch.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnPitch;
                @Pitch.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnPitch;
                @Pitch.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnPitch;
                @Yaw.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnYaw;
                @Yaw.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnYaw;
                @Yaw.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnYaw;
            }
            m_Wrapper.m_RotationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pitch.started += instance.OnPitch;
                @Pitch.performed += instance.OnPitch;
                @Pitch.canceled += instance.OnPitch;
                @Yaw.started += instance.OnYaw;
                @Yaw.performed += instance.OnYaw;
                @Yaw.canceled += instance.OnYaw;
            }
        }
    }
    public RotationActions @Rotation => new RotationActions(this);

    // DINOInput
    private readonly InputActionMap m_DINOInput;
    private IDINOInputActions m_DINOInputActionsCallbackInterface;
    private readonly InputAction m_DINOInput_Jump;
    public struct DINOInputActions
    {
        private @PlayerInput m_Wrapper;
        public DINOInputActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_DINOInput_Jump;
        public InputActionMap Get() { return m_Wrapper.m_DINOInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DINOInputActions set) { return set.Get(); }
        public void SetCallbacks(IDINOInputActions instance)
        {
            if (m_Wrapper.m_DINOInputActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_DINOInputActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_DINOInputActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_DINOInputActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_DINOInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public DINOInputActions @DINOInput => new DINOInputActions(this);
    public interface ITraslationActions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnLateral(InputAction.CallbackContext context);
        void OnVertical(InputAction.CallbackContext context);
    }
    public interface IRotationActions
    {
        void OnPitch(InputAction.CallbackContext context);
        void OnYaw(InputAction.CallbackContext context);
    }
    public interface IDINOInputActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
}
